import motor
import encoder
from pyb import Pin, Timer
from time import ticks_ms, ticks_diff

def rightMotor(shares):
    cent, lineType, head, bumped, stage, batVolt, east = shares
    eastHead  = east.get()

    # BNO055 headings calculate increased heading in the clockwise direction.
    # The quarter callouts are based on a traditional coordinate system.
    if eastHead >= 0 and eastHead < (3.14159/2): # q1
        northHead = eastHead + (3*3.14159/2)
        southHead = eastHead + (3.14159/2)
        westHead = eastHead + 3.14159 - 0.1
    elif eastHead >= (3.14159/2) and eastHead < 3.14159: # q4
        northHead = eastHead - 3.14159/2
        southHead = eastHead + 3.14159/2
        westHead = eastHead + 3.14159
    elif eastHead >= 3.14159 and eastHead < (3*3.14159/2): # q3
        northHead = eastHead - 3.14159/2
        southHead = eastHead + 3.14159/2
        westHead = eastHead - 3.14159
    else: # q2
        northHead = eastHead - (3.14159/2)
        southHead = eastHead - (3*3.14159/2)
        westHead = eastHead - 3.14159
    
    stage1encoder = 25000 # Encoder readings for right wheel for stage 1
    stage3encoder = 4576 # Encoder readings for right wheel for stage 3
    stage6encoder = -436  # Encoder readings for right wheel for stage 6
    stage8encoder = 2560  # Encoder readings for right wheel for stage 8
    stage10encoder = 1630  # Encoder readings for right wheel for stage 10
    stage12encoder = 1557  # Encoder readings for right wheel for stage 12
    rightState = 0
    while True:
        # State 0: Initialization
        if rightState == 0:
            # Motor Pin Setup
            RightEffort = Pin(Pin.cpu.A8, mode = Pin.OUT_PP)
            RightEffort.low()

            # PWM Setup
            RightPWM = 15 # PWM, %
            tim1 = Timer(1, freq = 20000)
            RightSpeed =  tim1.channel(1, pin=RightEffort, mode=Timer.PWM,
                                pulse_width_percent=RightPWM)
            RightMotor = motor.Motor(RightSpeed,Pin.cpu.B3,Pin.cpu.A10)
            RightEncoder = encoder.Encoder(3,Pin.cpu.B5,Pin.cpu.B4)
            RightMotor.disable()
            RightEncoder.zero()
            RightMotor.enable()

            rightState = 1
            stage.put(1)
            t1 = ticks_ms()
            integral = 0
            bat_level = batVolt.get()
            yield
        
        # Sort of like an external interrupt for bump sensors
        if bumped.get() == 1:
            RightMotor.disable()
            yield
        
        # State 1: Line following
        elif rightState ==1:
            RightEncoder.update()
            setpoint = 0 # Central centroid
            pv = cent.get()
            kp = 4 # Proportional gain
            ki = 0.01  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2
            
            integral += (setpoint-pv)*dt
            control = kp*(setpoint-pv) + ki*integral
            RPWM = 27*(7.8/bat_level)

            RightPWM = RPWM + control*15
            if RightPWM > 30:
                RightPWM = 30
            
            RightMotor.set_effort(RightPWM)

            # Checking that we've gone far enough and that the line sensor is
            # reading all white
            if ((RightEncoder.get_position() >= stage1encoder) and \
                (lineType.get() == 2)) or stage.get() == 2:
                rightState = 2
                stage.put(2)
            yield

        # State 2: Start of grid, checking heading. Want to face local west
        elif rightState == 2:     
            if head.get() > (westHead-0.02) and head.get() < (westHead+0.02) \
                or stage.get() == 3:
                RightPWM = 0
                RightMotor.set_effort(RightPWM)
                RightEncoder.zero()
                # Setup for PI controller for next state
                integral = 0
                t1 = ticks_ms()
                rightState = 3
                stage.put(3)
            elif head.get() > (westHead+0.02) and head.get() < (westHead + 3.14):
                RightPWM = 17
                RightMotor.set_effort(RightPWM)
            else:
                RightPWM = -17
                RightMotor.set_effort(RightPWM)
            yield 
        
        # State 3: Traveling along grid. Controlling for local west heading.
        elif rightState == 3:
            RightEncoder.update()
            setpoint = westHead # Central centroid
            pv = head.get()
            kp = 5  # Proportional gain
            ki = 0.01  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2
            
            integral += (pv-setpoint)*dt
            control = kp*(pv-setpoint) + ki*integral
            RPWM = 20*(7.8/bat_level)

            RightPWM = RPWM + control*15
            if RightPWM > 20:
                RightPWM = 20

            RightMotor.set_effort(RightPWM)

            if RightEncoder.get_position() >= stage3encoder or stage.get() == 4:
                stage.put(4)
                rightState = 4
                print("stage 4 R")

            yield

        # State 4: Turning to face the wall (local north)
        elif rightState == 4:
            if head.get() > (northHead-0.02) and head.get() < (northHead+0.02)\
                  or stage.get() == 5:
                RightPWM = 0
                RightMotor.set_effort(RightPWM)
                RightEncoder.zero()
                # Setup for PI controller for next state
                integral = 0
                t1 = ticks_ms()
                rightState = 5
                stage.put(5)
                print("stage 5 R")
            elif head.get() < (northHead-0.02) and head.get() > (northHead - 3.14):
                RightPWM = -15
                RightMotor.set_effort(RightPWM)
            else:
                RightPWM = 15
                RightMotor.set_effort(RightPWM)
            yield 

        # State 5: Going straight then line following. This is treated as a pure 
        # line state.
        elif rightState == 5:
            RightEncoder.update()
            setpoint = 0 # Central centroid
            pv = cent.get()
            kp = 3  # Proportional gain
            ki = 0.001  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2
            
            integral += (setpoint-pv)*dt
            control = kp*(setpoint-pv) + ki*integral
            RPWM = 23*(7.8/bat_level)

            RightPWM = RPWM + control*15
            if RightPWM > 30:
                RightPWM = 30
            
            RightMotor.set_effort(RightPWM)

            if bumped.get() == 2 or stage.get() == 6:
                print("stage 6 R")
                RightEncoder.zero()
                t1 = ticks_ms()
                stage.put(6)
                rightState = 6
            yield

        # State 6: backing up from wall
        elif rightState == 6:
            RightEncoder.update()
            setpoint = northHead # romi facing north
            pv = head.get()
            kp = 2  # Proportional gain
            ki = 0.001  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2
            
            integral += (pv-setpoint)*dt
            control = kp*(pv-setpoint) + ki*integral
            RPWM = -20*(7.8/bat_level)

            RightPWM = RPWM - control*15
            if RightPWM > 20:
                RightPWM = 20

            RightMotor.set_effort(RightPWM)

            # <=, going backwards during this stage/state
            if RightEncoder.get_position() <= stage6encoder or stage.get() == 7: 
                rightState = 7
                stage.put(7)
                print("stage 7 R")
            yield

        # State 7: Turning to face cup (local east)
        elif rightState == 7:
            if eastHead - 0.02 <= 0:
                eastMin = eastHead+6.26318
            else:
                eastMin = eastHead - 0.02
            if head.get() > (eastMin) or head.get() < (eastHead+0.02)\
                 or stage.get() == 8:
                RightPWM = 0
                RightMotor.set_effort(RightPWM)
                RightEncoder.zero()
                # Setup for PI controller for next state
                integral = 0
                t1 = ticks_ms()
                rightState = 8
                stage.put(8)
                print("stage 8 R")
            elif head.get() < (eastMin) or head.get() > (eastHead + 3.14):
                RightPWM = -15
                RightMotor.set_effort(RightPWM)
            else:
                RightPWM = 15
                RightMotor.set_effort(RightPWM)
            yield 

        # State 8: going east and pushing cup
        elif rightState == 8:
            RightEncoder.update()
            setpoint = eastHead # facing east
            pv = head.get()
            kp = 2  # Proportional gain
            ki = 0.001  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2

            if pv > 3.14159:
                pv = head.get()-6.28318
            
            integral += (pv-setpoint)*dt
            control = kp*(pv-setpoint) + ki*integral
            RPWM = 20*(7.8/bat_level)

            RightPWM = RPWM + control*15
            if RightPWM > 20:
                RightPWM = 20

            RightMotor.set_effort(RightPWM)

            if RightEncoder.get_position() >= stage8encoder or stage.get() == 9:
                stage.put(9)
                rightState = 9
                print("stage 9 R")
            yield
        
        # State 9: Turning to face local north
        elif rightState == 9:
            if head.get() > (northHead-0.02) and head.get() < (northHead+0.02)\
                  or stage.get() == 10:
                RightPWM = 0
                RightMotor.set_effort(RightPWM)
                RightEncoder.zero()
                # Setup for PI controller for next state
                integral = 0
                t1 = ticks_ms()
                rightState = 10
                stage.put(10)
                print("stage 10 R")
            elif head.get() < (northHead-0.02) and head.get() > (northHead - 3.14):
                RightPWM = -15
                RightMotor.set_effort(RightPWM)
            else:
                RightPWM = 15
                RightMotor.set_effort(RightPWM)
            yield 

        # State 10: Going north until line is hit
        elif rightState == 10:
            RightEncoder.update()
            setpoint = northHead # facing north
            pv = head.get()
            kp = 2  # Proportional gain
            ki = 0.001  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2
            
            integral += (pv-setpoint)*dt
            control = kp*(pv-setpoint) + ki*integral
            RPWM = 20*(7.8/bat_level)

            RightPWM = RPWM + control*15
            if RightPWM > 20:
                RightPWM = 20

            RightMotor.set_effort(RightPWM)

            if ((RightEncoder.get_position() >= stage10encoder)) \
                    or stage.get() == 11:
                pv = 0 
                stage.put(11)
                rightState = 11
                print("stage 11 R")
            yield
        
        # State 11: turning to face west
        elif rightState == 11:
            if head.get() > (westHead-0.02) and head.get() < (westHead+0.02) \
                or stage.get() == 12:
                RightPWM = 0
                RightMotor.set_effort(RightPWM)
                RightEncoder.zero()
                # Setup for PI controller for next state
                integral = 0
                t1 = ticks_ms()
                rightState = 12
                stage.put(12)
                print("stage 12 R")
            elif head.get() > (westHead+0.02) and head.get() < (westHead + 3.14):
                RightPWM = 15
                RightMotor.set_effort(RightPWM)
            else:
                RightPWM = -15
                RightMotor.set_effort(RightPWM)
            yield 
        
        # State 12: Line following back to the start
        elif rightState == 12:
            RightEncoder.update()
            setpoint = 0 # Central centroid
            pv = cent.get()
            kp = 2  # Proportional gain
            ki = 0.001  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2
            
            integral += (setpoint-pv)*dt
            control = kp*(setpoint-pv) + ki*integral
            RPWM = 15*(7.8/bat_level)

            RightPWM = RPWM + control*15
            if RightPWM > 30:
                RightPWM = 30

            RightMotor.set_effort(RightPWM)

            if ((RightEncoder.get_position() >= stage12encoder)\
                and lineType.get() ==3) or stage.get() == 13:
                stage.put(13)
                rightState = 13
                print("stage 13 R")
            yield
        
        # State 13: DONE!
        elif rightState == 13:
            RightMotor.disable()
            yield
