import motor
import encoder
from pyb import Pin, Timer, ADC
from time import ticks_ms, ticks_diff

def leftMotor(shares):
    cent, lineType, head, bumped, stage, batVolt, east = shares
    eastHead = east.get()

    # BNO055 headings calculate increased heading in the clockwise direction.
    # The quarter callouts are based on a traditional coordinate system.
    if eastHead >= 0 and eastHead < (3.14159/2): # q1
        northHead = eastHead + (3*3.14159/2) - 0.05
        southHead = eastHead + (3.14159/2)
        westHead = eastHead + 3.14159 - 0.1
    elif eastHead >= (3.14159/2) and eastHead < 3.14159: # q4
        northHead = eastHead - 3.14159/2
        southHead = eastHead + 3.14159/2
        westHead = eastHead + 3.14159
    elif eastHead >= 3.14159 and eastHead < (3*3.14159/2): # q3
        northHead = eastHead - 3.14159/2
        southHead = eastHead + 3.14159/2
        westHead = eastHead - 3.14159
    else: # q2
        northHead = eastHead - (3.14159/2)
        southHead = eastHead - (3*3.14159/2)
        westHead = eastHead - 3.14159
    
    stage1encoder = 25600 # Encoder readings for left wheel for stage 1
    stage3encoder = 4700 # Encoder readings for left wheel for stage 3
    stage6encoder = -700  # Encoder readings for left wheel for stage 6
    stage8encoder = 3610  # Encoder readings for left wheel for stage 8
    stage10encoder = 2859  # Encoder readings for left wheel for stage 10
    stage12encoder = 1700  # Encoder readings for left wheel for stage 12
    leftState = 0
    while True:
        # State 0: Initialization
        if leftState == 0:
          # Motor Pin Setup
            LeftEffort = Pin(Pin.cpu.A9, mode = Pin.OUT_PP)
            LeftEffort.low()
            
            # PWM Setup
            LeftPWM = 15 # PWM, %
            tim1 = Timer(1, freq = 20000)
            LeftSpeed = tim1.channel(2, pin=LeftEffort, mode=Timer.PWM,
                                pulse_width_percent=LeftPWM)
            LeftMotor = motor.Motor(LeftSpeed,Pin.cpu.A6,Pin.cpu.A7)
            LeftEncoder = encoder.Encoder(8,Pin.cpu.C7,Pin.cpu.C6)
            LeftMotor.disable()
            LeftEncoder.zero()
            LeftMotor.enable()

            leftState = 1
            stage.put(1)
            t1 = ticks_ms()
            integral = 0
            batADC = ADC(Pin.cpu.B1)
            batVolt.put(batADC.read()*3.3/4095*14.7/4.7)
            bat_level = batVolt.get()
            if batADC.read()*3.3/4095*14.7/4.7 < 6.5:
                print("battery voltage 6.5 or lower")
            yield
        
        # Sort of like an external interrupt for bump sensors
        if bumped.get() == 1:
            LeftMotor.disable()
            yield
        
        # State 1: Line following
        elif leftState ==1:
            LeftEncoder.update()
            setpoint = 0 # Central centroid
            pv = cent.get()
            kp = 7 # Proportional gain
            ki = 0.01  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2

            integral += (pv-setpoint)*dt
            control = kp*(pv-setpoint) + ki*integral
            LPWM = 27*(7.8/bat_level)

            LeftPWM = LPWM + control*15
            if LeftPWM > 30:
                LeftPWM = 30
            elif LeftPWM < 0:
                LeftPWM = 0

            LeftMotor.set_effort(LeftPWM)

            # Checking that we've gone far enough and that the line sensor is
            # reading all white
            if ((LeftEncoder.get_position() >= stage1encoder) and \
                (lineType.get() == 2)) or stage.get() == 2:
                LeftMotor.set_effort(0)
                leftState = 2
                stage.put(2)
            yield

        # State 2: Start of grid, checking heading. Want to face local west
        elif leftState == 2:
            if head.get() > (westHead-0.02) and head.get() < (westHead+0.02) \
                or stage.get() == 3:
                LeftPWM = 0
                LeftMotor.set_effort(LeftPWM)
                LeftEncoder.zero()
                # Setup for PI controller for next state
                integral = 0
                t1 = ticks_ms()
                leftState = 3
                stage.put(3)
            elif head.get() > (westHead+0.02) and head.get() < (westHead + 3.14):
                LeftPWM = -17
                LeftMotor.set_effort(LeftPWM)
            else:
                LeftPWM = 17
                LeftMotor.set_effort(LeftPWM)
            yield 
        
    # State 3: Traveling along grid. Controlling for local west heading.
        elif leftState == 3:
            LeftEncoder.update()
            setpoint = westHead # facing west
            pv = head.get()
            kp = 5  # Proportional gain
            ki = 0.01  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2
            
            integral += (setpoint-pv)*dt
            control = kp*(setpoint-pv) + ki*integral
            LPWM = 25*(7.8/bat_level)

            LeftPWM = LPWM + control*15
            if LeftPWM > 20:
                LeftPWM = 20

            LeftMotor.set_effort(LeftPWM)

            if LeftEncoder.get_position() >= stage3encoder or stage.get() == 4:
                stage.put(4)
                leftState = 4
            yield

        # State 4: Turning to face the wall (local north)
        elif leftState == 4:
            if head.get() > (northHead-0.02) and head.get() < (northHead+0.02)\
                  or stage.get() == 5:
                LeftPWM = 0
                LeftMotor.set_effort(LeftPWM)
                LeftEncoder.zero()
                # Setup for PI controller for next state
                integral = 0
                t1 = ticks_ms()
                leftState = 5
                stage.put(5)
            elif head.get() < (northHead-0.02) and head.get() > (northHead - 3.14):
                LeftPWM = 15
                LeftMotor.set_effort(LeftPWM)
            else:
                LeftPWM = -15
                LeftMotor.set_effort(LeftPWM)
            yield 

        # State 5: Going straight then line following. This is treated as a pure 
        # line state.
        elif leftState == 5:
            LeftEncoder.update()
            setpoint = 0 # Central centroid
            pv = cent.get()
            kp = 3  # Proportional gain
            ki = 0.001  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2
            integral += (pv-setpoint)*dt
            control = kp*(pv-setpoint) + ki*integral
            LPWM = 23*(7.8/bat_level)
            LeftPWM = LPWM + control*15
            
            if LeftPWM > 30:
                LeftPWM = 30
            
            LeftMotor.set_effort(LeftPWM)

            if bumped.get() == 2 or stage.get() == 6:
                print("stage 6 L")
                LeftEncoder.zero()
                t1 = ticks_ms()
                stage.put(6)
                leftState = 6
            yield

        # State 6: backing up from wall, facing north
        elif leftState == 6:
            LeftEncoder.update()
            setpoint = northHead # facing west
            pv = head.get()
            kp = 3  # Proportional gain
            ki = 0.01  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2

            integral += (pv-setpoint)*dt
            control = kp*(pv-setpoint) + ki*integral
            LPWM = -23*(7.8/bat_level)

            LeftPWM = LPWM - control*15
            if LeftPWM < -25:
                LeftPWM = -25

            LeftMotor.set_effort(LeftPWM)

            # <=, going backwards during this stage/state
            if LeftEncoder.get_position() <= stage6encoder or stage.get() == 7: 
                leftState = 7
                stage.put(7)
            yield

        # State 7: Turning to face cup (local east)
        elif leftState == 7:
            if head.get() > (eastHead - 0.03) and head.get() < (eastHead+0.01)\
                 or stage.get() == 8:
                LeftPWM = 0
                LeftMotor.set_effort(LeftPWM)
                LeftEncoder.zero()
                # Setup for PI controller for next state
                integral = 0
                t1 = ticks_ms()
                leftState = 8
                stage.put(8)
            elif head.get() < (6.26316) or head.get() > (eastHead + 3.14):
                LeftPWM = 15
                LeftMotor.set_effort(LeftPWM)
            else:
                LeftPWM = -15
                LeftMotor.set_effort(LeftPWM)
            yield 

        # State 8: going east and pushing cup
        elif leftState == 8:
            LeftEncoder.update()
            setpoint = eastHead-0.01 # facing east
            pv = head.get()
            kp = 3  # Proportional gain
            ki = 0.01  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2

            if pv > 3.14159:
                pv = head.get()-6.28318
            
            integral += (setpoint-pv)*dt
            control = kp*(setpoint-pv) + ki*integral
            LPWM = 20*(7.8/bat_level)

            LeftPWM = LPWM + control*15

            if LeftPWM > 25:
                LeftPWM = 25
            
            LeftMotor.set_effort(LeftPWM)

            if LeftEncoder.get_position() >= stage8encoder or stage.get() == 9:
                stage.put(9)
                leftState = 9
            yield
        
        # State 9: Turning to face local north
        elif leftState == 9:
            if head.get() > (northHead-0.02) and head.get() < (northHead+0.02)\
                  or stage.get() == 10:
                LeftPWM = 0
                LeftMotor.set_effort(LeftPWM)
                LeftEncoder.zero()
                # Setup for PI controller for next state
                integral = 0
                t1 = ticks_ms()
                leftState = 10
                stage.put(10)
            elif head.get() < (northHead-0.02) and head.get() > (northHead - 3.14):
                LeftPWM = 15
                LeftMotor.set_effort(LeftPWM)
            else:
                LeftPWM = -15
                LeftMotor.set_effort(LeftPWM)
            yield 

        # State 10: Going north until line is hit
        elif leftState == 10:
            LeftEncoder.update()
            setpoint = northHead # facing north
            pv = head.get()
            kp = 5  # Proportional gain
            ki = 0.01  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2
            
            integral += (setpoint-pv)*dt
            control = kp*(setpoint-pv) + ki*integral
            LPWM = 20*(7.8/bat_level)

            LeftPWM = LPWM + control*15

            if LeftPWM > 25:
                LeftPWM = 25
            
            LeftMotor.set_effort(LeftPWM)

            if ((LeftEncoder.get_position() >= stage10encoder))\
                    or stage.get() == 11:
                pv = 0 
                stage.put(11)
                leftState = 11
            yield
        
        # State 11: turning to face west
        elif leftState == 11:
            if head.get() > (westHead-0.02) and head.get() < (westHead+0.02) \
                or stage.get() == 12:
                LeftPWM = 0
                LeftMotor.set_effort(LeftPWM)
                LeftEncoder.zero()
                # Setup for PI controller for next state
                integral = 0
                t1 = ticks_ms()
                leftState = 12
                stage.put(12)
            elif head.get() > (westHead+0.02) and head.get() < (westHead + 3.14):
                LeftPWM = -15
                LeftMotor.set_effort(LeftPWM)
            else:
                LeftPWM = 15
                LeftMotor.set_effort(LeftPWM)
            yield
        
        # State 12: Line following back to the start
        elif leftState == 12:
            LeftEncoder.update()
            setpoint = 0 # Central centroid
            pv = cent.get()
            kp = 3  # Proportional gain
            ki = 0.001  # Integral gain
            t2 = ticks_ms()
            dt = ticks_diff(t2,t1)/1000  # Time step
            t1 = t2
            
            integral += (pv-setpoint)*dt
            control = kp*(pv-setpoint) + ki*integral
            LPWM = 25*(7.8/bat_level)

            LeftPWM = LPWM + control*15
            
            if LeftPWM > 30:
                LeftPWM = 30

            LeftMotor.set_effort(LeftPWM)

            if (LeftEncoder.get_position() >= stage12encoder\
                and lineType.get() == 3) or stage.get() == 13:
                stage.put(13)
                leftState = 13
            yield
        
        # State 13: DONE!
        elif leftState == 13:
            LeftMotor.disable()
            yield
