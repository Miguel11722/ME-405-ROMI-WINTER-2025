#The following code creates a class for the bumper sensors to use
from pyb import Pin, Timer, millis
from time import sleep_ms
def main():
    bump = bumpsensor(Pin.cpu.H0,Pin.cpu.H1,Pin.cpu.D2,Pin.cpu.A15,Pin.cpu.C12,
                      Pin.cpu.C10)
    
    b = bump.checkBumped()
    
    while True:
        b = bump.checkBumped()
        sleep_ms(10)
        if b == 1:
            print("bumped!")



class bumpsensor:
    '''A bump sensor class that tests if any of the bump sensors havew been'''
    '''triggered.'''
    def __init__(self,bump0,bump1,bump2,bump3,bump4,bump5):
        self.pins = [Pin(bump0,mode=Pin.IN),Pin(bump1,mode=Pin.IN),
                     Pin(bump2,mode=Pin.IN),Pin(bump3,mode=Pin.IN),
                     Pin(bump4,mode=Pin.IN),Pin(bump5,mode=Pin.IN)]
        self.lowList = [0 for n in range(6)]
        self.lowPin = -1   # low pin index. -1 indicates no pins low.
        self.t1 = millis()
        self.t2 = millis()

    def checkBumped(self):
        '''Returns a 1 if any pins have been bumped, or 0 if it hasn't been
        bumped or is still checking the debouncing. This is reliant on continual
        checking by the bump sensor task in main.'''
        bumped = 0
        for i in range(6):
            self.lowList[i] = self.pins[i].value()
        if self.t2-self.t1 >= 50: # Been 50 ms and pin still low
            bumped = 1
            self.t1 = millis()
            self.t2 = millis()
            self.lowPin = -1

        else: # See if any pins are low
            try:
                if self.lowPin == -1:
                    self.lowPin = self.lowList.index(0) # earliest low pin
                # If the pin is still low, increase the time count
                elif self.lowList[self.lowPin] == 0:
                    self.t2 = millis()
                # If the pin has gone low too soon, reset timer
                else:
                    self.lowPin = -1
                    self.t1 = millis()
                    self.t2 = millis()

            except: # no pins low, reset
                self.lowPin = -1
                self.t1 = millis()
                self.t2 = millis()

        return bumped
               
if __name__ == "__main__":
    main()
