# Driver for a BNO055 IMU

from pyb import I2C
from time import sleep_ms

class IMU:
    def __init__(self,I2C):
        self.I2C = I2C      # preconfigured I2C object
        self.addr = 0x28
        # set up units. Euler angles in radians, angular rate in rad/s, and
        # acceleration in m/s^2
        self.I2C.mem_write(0b00000110,self.addr,0x3B) 

    def mode(self,mode):
        '''Changes the IMU fusion operation mode. The input "mode" is a string 
        denoting the desired operating mode. The mode must be set to CONFIG
        before being able to be set to any other operation mode.'''
        modeDict = {"IMU":0b1000,"COMPASS":0b1001,"M4G":0b1010,
                    "NDOF_FMC_OFF":0b1011,"NDOF":0b1100,"CONFIG":0b0000}
        OPR_MODE = 0x3D
        self.I2C.mem_write(modeDict[mode],self.addr,OPR_MODE)
        return
    
    def calibration_byte(self):
        '''Returns a parsed version of the calibration status byte as 
        integers'''
        buffer = bytearray(1)
        CALIB_STAT = 0x35
        self.I2C.mem_read(buffer, self.addr, CALIB_STAT)
        calbyte = int.from_bytes(buffer,'big')
        gyro =      (calbyte & 0b00110000) >> 4
        accel =     (calbyte & 0b00001100) >> 2
        magnet =    (calbyte & 0b00000011)
        
        return gyro, accel, magnet
    
    def write_coef(self):
        ''''Returns the calibration coefficients for the IMU to the 
        coefficients.txt file'''
        self.coef=bytearray(22)
        self.I2C.mem_read(self.coef,self.addr,0x55)
        with open("coefficients.txt","w") as f:
            f.write(self.coef.hex())

    def read_coef(self):
        ''''Writes the calibration coefficients for the IMU from the
        coefficients.txt file.'''
        coefString = ''
        with open("coefficients.txt","r") as f:
            coefString = f.read()

        self.coef=bytearray.fromhex(coefString)
        self.I2C.mem_write(self.coef,self.addr,0x55)

    def fullEuler(self):
        '''Gets a full set of Euler angles for orientation from the IMU. Returns
        in radians.'''
        buffer = bytearray(6)
        self.I2C.mem_read(buffer, self.addr, 0x1A)
        self.head   = ((buffer[1]*(2**8))+ buffer[0])/900
        self.roll   = ((buffer[3]*(2**8))+ buffer[2])/900
        self.pitch  = ((buffer[5]*(2**8))+ buffer[4])/900
        return self.head, self.roll, self.pitch

    def heading(self):
        '''Gets just the heading (yaw) Euler angle in radians.'''
        buffer = bytearray(2)
        self.I2C.mem_read(buffer, self.addr, 0x1E)
        self.head  = ((buffer[1]*(2**8))+ buffer[0])/900
        return self.head

    def quaternion(self):
        '''Returns the quaternion of orientation. Unitless.'''
        buffer = bytearray(8)
        self.I2C.mem_read(buffer, self.addr, 0x20)
        self.w  = ((buffer[1]*(2**8))+ buffer[0])
        self.x  = ((buffer[3]*(2**8))+ buffer[2])
        self.y  = ((buffer[5]*(2**8))+ buffer[4])
        self.z  = ((buffer[7]*(2**8))+ buffer[6])

        return self.w, self.x, self.y, self.z
    
    def fullAngular(self):
        # DOUBLE CHECK THAT THESE AREN'T REMAPPED LIKE EULER ANGLES WERE!!!!
        '''Returns x, y, and z angular velocities in rad/s'''
        buffer = bytearray(6)
        self.I2C.mem_read(buffer, self.addr, 0x14)
        self.pitchRate  = ((buffer[1]*(2**8))+ buffer[0])
        self.rollRate   = ((buffer[3]*(2**8))+ buffer[2])
        self.yawRate    = ((buffer[5]*(2**8))+ buffer[4])
        return self.pitchRate, self.rollRate, self.yawRate        

    def headRate(self):
        '''Returns the heading rate of the IMU in rad/s'''
        buffer = bytearray(2)
        self.I2C.mem_read(buffer, self.addr, 0x18)
        self.headingRate  = ((buffer[1]*(2**8))+ buffer[0])
        return self.headingRate
    
    def findNorth(self):
        '''Returns the x and y components of the magnetic field in microTesla'''
        buffer = bytearray(4)
        self.I2C.mem_read(buffer, self.addr, 0x0E)
        self.magx = ((buffer[1]*(2**8))+ buffer[0])/16
        self.magy = ((buffer[3]*(2**8))+ buffer[2])/16
        return self.magx, self.magy
